// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	apiserverv1 "github.com/openshift/api/apiserver/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCriticalResources implements CriticalResourceInterface
type FakeCriticalResources struct {
	Fake *FakeApiserverV1
	ns   string
}

var criticalresourcesResource = schema.GroupVersionResource{Group: "apiserver.openshift.io", Version: "v1", Resource: "criticalresources"}

var criticalresourcesKind = schema.GroupVersionKind{Group: "apiserver.openshift.io", Version: "v1", Kind: "CriticalResource"}

// Get takes name of the criticalResource, and returns the corresponding criticalResource object, and an error if there is any.
func (c *FakeCriticalResources) Get(ctx context.Context, name string, options v1.GetOptions) (result *apiserverv1.CriticalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(criticalresourcesResource, c.ns, name), &apiserverv1.CriticalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apiserverv1.CriticalResource), err
}

// List takes label and field selectors, and returns the list of CriticalResources that match those selectors.
func (c *FakeCriticalResources) List(ctx context.Context, opts v1.ListOptions) (result *apiserverv1.CriticalResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(criticalresourcesResource, criticalresourcesKind, c.ns, opts), &apiserverv1.CriticalResourceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &apiserverv1.CriticalResourceList{ListMeta: obj.(*apiserverv1.CriticalResourceList).ListMeta}
	for _, item := range obj.(*apiserverv1.CriticalResourceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested criticalResources.
func (c *FakeCriticalResources) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(criticalresourcesResource, c.ns, opts))

}

// Create takes the representation of a criticalResource and creates it.  Returns the server's representation of the criticalResource, and an error, if there is any.
func (c *FakeCriticalResources) Create(ctx context.Context, criticalResource *apiserverv1.CriticalResource, opts v1.CreateOptions) (result *apiserverv1.CriticalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(criticalresourcesResource, c.ns, criticalResource), &apiserverv1.CriticalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apiserverv1.CriticalResource), err
}

// Update takes the representation of a criticalResource and updates it. Returns the server's representation of the criticalResource, and an error, if there is any.
func (c *FakeCriticalResources) Update(ctx context.Context, criticalResource *apiserverv1.CriticalResource, opts v1.UpdateOptions) (result *apiserverv1.CriticalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(criticalresourcesResource, c.ns, criticalResource), &apiserverv1.CriticalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apiserverv1.CriticalResource), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeCriticalResources) UpdateStatus(ctx context.Context, criticalResource *apiserverv1.CriticalResource, opts v1.UpdateOptions) (*apiserverv1.CriticalResource, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(criticalresourcesResource, "status", c.ns, criticalResource), &apiserverv1.CriticalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apiserverv1.CriticalResource), err
}

// Delete takes name of the criticalResource and deletes it. Returns an error if one occurs.
func (c *FakeCriticalResources) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(criticalresourcesResource, c.ns, name), &apiserverv1.CriticalResource{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCriticalResources) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(criticalresourcesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &apiserverv1.CriticalResourceList{})
	return err
}

// Patch applies the patch and returns the patched criticalResource.
func (c *FakeCriticalResources) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiserverv1.CriticalResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(criticalresourcesResource, c.ns, name, pt, data, subresources...), &apiserverv1.CriticalResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*apiserverv1.CriticalResource), err
}
