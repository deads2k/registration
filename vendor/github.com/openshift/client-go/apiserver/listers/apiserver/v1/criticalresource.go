// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/api/apiserver/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CriticalResourceLister helps list CriticalResources.
type CriticalResourceLister interface {
	// List lists all CriticalResources in the indexer.
	List(selector labels.Selector) (ret []*v1.CriticalResource, err error)
	// CriticalResources returns an object that can list and get CriticalResources.
	CriticalResources(namespace string) CriticalResourceNamespaceLister
	CriticalResourceListerExpansion
}

// criticalResourceLister implements the CriticalResourceLister interface.
type criticalResourceLister struct {
	indexer cache.Indexer
}

// NewCriticalResourceLister returns a new CriticalResourceLister.
func NewCriticalResourceLister(indexer cache.Indexer) CriticalResourceLister {
	return &criticalResourceLister{indexer: indexer}
}

// List lists all CriticalResources in the indexer.
func (s *criticalResourceLister) List(selector labels.Selector) (ret []*v1.CriticalResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CriticalResource))
	})
	return ret, err
}

// CriticalResources returns an object that can list and get CriticalResources.
func (s *criticalResourceLister) CriticalResources(namespace string) CriticalResourceNamespaceLister {
	return criticalResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CriticalResourceNamespaceLister helps list and get CriticalResources.
type CriticalResourceNamespaceLister interface {
	// List lists all CriticalResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CriticalResource, err error)
	// Get retrieves the CriticalResource from the indexer for a given namespace and name.
	Get(name string) (*v1.CriticalResource, error)
	CriticalResourceNamespaceListerExpansion
}

// criticalResourceNamespaceLister implements the CriticalResourceNamespaceLister
// interface.
type criticalResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CriticalResources in the indexer for a given namespace.
func (s criticalResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.CriticalResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CriticalResource))
	})
	return ret, err
}

// Get retrieves the CriticalResource from the indexer for a given namespace and name.
func (s criticalResourceNamespaceLister) Get(name string) (*v1.CriticalResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("criticalresource"), name)
	}
	return obj.(*v1.CriticalResource), nil
}
